(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{197:function(e,t,o){"use strict";o.r(t);var n={props:["slot-key"],mounted:function(){this.$nextTick(function(){this.$vuepress.$emit("AsyncMarkdownContentMounted",this.slotKey)})}},s=o(3),i=Object(s.a)(n,function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.slotKey}},[o("h1",{attrs:{id:"introduction"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#introduction","aria-hidden":"true"}},[e._v("#")]),e._v(" Introduction")]),e._v(" "),o("h2",{attrs:{id:"what-is-clipped-js"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#what-is-clipped-js","aria-hidden":"true"}},[e._v("#")]),e._v(" What is Clipped.js?")]),e._v(" "),o("p",[e._v("Clipped.js is a tool to make creating and configuring apps a breeze.")]),e._v(" "),o("p",[e._v("Clipped consists of 2 parts: "),o("strong",[e._v("Config")]),e._v(" and "),o("strong",[e._v("Action")]),e._v(".")]),e._v(" "),o("h3",{attrs:{id:"config"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#config","aria-hidden":"true"}},[e._v("#")]),e._v(" Config")]),e._v(" "),o("p",[o("strong",[e._v("Config")]),e._v(" are settings for tools, such as "),o("code",[e._v("webpack.config.js")]),e._v(" and "),o("code",[e._v(".babelrc")]),e._v(". Often these are considered project-specific, when the fact is they are often identical cross projects.")]),e._v(" "),o("p",[e._v("To lessen the inconvenience of copy-pasting the config, tools like "),o("code",[e._v("create-react-app")]),e._v(", "),o("code",[e._v("@vue/cli")]),e._v(" appeared to abstract this part. However either it removes the customizability so you have to "),o("code",[e._v("eject")]),e._v(" to customize, or restricted to certain toolsets. For instance you cannot use Rollup in "),o("code",[e._v("@vue/cli")]),e._v(".")]),e._v(" "),o("h3",{attrs:{id:"action"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#action","aria-hidden":"true"}},[e._v("#")]),e._v(" Action")]),e._v(" "),o("p",[o("strong",[e._v("Action")]),e._v(" are using config to do tasks. An example will be using Babel to transpile files using "),o("code",[e._v(".babelrc")]),e._v(" as options. Currently you often do actions with npm scripts. It is convenient, but again you cannot reuse it cross-projects.")]),e._v(" "),o("p",[e._v("Note that often "),o("strong",[e._v("Config")]),e._v(" are actually dependent on the "),o("strong",[e._v("Action")]),e._v(". For instance you want size analyzer in "),o("code",[e._v("npm run dev")]),e._v(", and strip "),o("code",[e._v("console.log")]),e._v("'s in "),o("code",[e._v("npm run build")]),e._v(". This is also handled nicely by Clipped.")]),e._v(" "),o("h2",{attrs:{id:"how-it-works"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#how-it-works","aria-hidden":"true"}},[e._v("#")]),e._v(" How it works")]),e._v(" "),o("p",[e._v("Clipped believes that both "),o("strong",[e._v("Config")]),e._v(" and "),o("strong",[e._v("Action")]),e._v(" should be reusable. By using the 'Plugin' concept, overrides can be applied layer-by-layer. This makes configuration way easier to reason about.")]),e._v(" "),o("p",[e._v("In fact, the concept works so well that plugins can be easily integrated with each other. For example, "),o("strong",[e._v("Babel")]),e._v(" plugin can be integrated with "),o("strong",[e._v("Rollup")]),e._v(" or "),o("strong",[e._v("Webpack")]),e._v(" by placing it under the bundlers, which makes corresponding changes if the bundlers are detected.")])])},[],!1,null,null,null);i.options.__file="README.md";t.default=i.exports}}]);